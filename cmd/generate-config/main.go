package main

import (
	"bufio"
	"fmt"
	"github.com/fatih/color"
	"log"
	"math"
	"os"
	"strconv"
	"strings"

	api "tinkoff-invest-bot/investapi"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/pkg/sdk"
)

var (
	scanner = bufio.NewScanner(os.Stdin)
	bold    = color.New(color.Bold).SprintfFunc()
)

const (
	configsPath     = "./configs/generated/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	// TODO —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –µ–º–æ–¥–∂–∏ –Ω–∞ –ª–∏–Ω—É—Ö–µ?
	fmt.Println(color.GreenString("\U0001F916 –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–†–æ–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", color.MagentaString("–±–∞–∑–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ üìà"), "–Ω–∞ MOEX –∏ SPB")
	fmt.Println("–ï—â–µ", color.MagentaString("–Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"), "–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å üí´")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
	accounts, err := s.GetAccounts()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: %v", err)
	}
	invalidAccounts := 0
	var accountsInfo []string
	for _, account := range accounts {
		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ—Ç
		if account.GetType() == api.AccountType_ACCOUNT_TYPE_UNSPECIFIED ||
			account.GetStatus() != api.AccountStatus_ACCOUNT_STATUS_OPEN ||
			account.GetAccessLevel() != api.AccessLevel_ACCOUNT_ACCESS_LEVEL_FULL_ACCESS {
			invalidAccounts++
			continue
		}
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
		var accountInfo string
		switch account.GetType() {
		case api.AccountType_ACCOUNT_TYPE_INVEST_BOX:
			accountInfo += "üê∑ "
		case api.AccountType_ACCOUNT_TYPE_TINKOFF_IIS:
			accountInfo += "üè¶ "
		case api.AccountType_ACCOUNT_TYPE_TINKOFF:
			accountInfo += "üí∞ "
		}
		accountInfo += account.GetName() + " "
		portfolio, err := s.GetPortfolio(account.GetId())
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %v", account.GetId(), err)
		}
		accountInfo += portfolioReport(portfolio)
		accountsInfo = append(accountsInfo, accountInfo)
	}

	// –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
	if invalidAccounts > 0 {
		fmt.Printf(color.YellowString("–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")+": %d\n", invalidAccounts)
	}
	n := requestChoice("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", accountsInfo)
	account := accounts[n]

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	// TODO –≤—ã–±–æ—Ä –∏ –∑–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è StrategyList)
	strategy := config.Strategy{
		Name: "",
		StrategyConfig: config.StrategyConfig{
			Threshold:    0,
			CandlesCount: 0,
		},
	}

	// –í—ã–±–æ—Ä –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
	responseShares, err := s.GetShares()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö: %v", err)
	}
	input := requestParameter("üõç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", true)
	tickers := strings.Split(input, " ")
	for i := 0; i < len(tickers); i++ {
		tickers[i] = strings.ToUpper(tickers[i])
	}

TickerLoop:
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
	for _, ticker := range tickers {
		for {
			for _, share := range responseShares {
				if share.GetTicker() == ticker {
					tradingConfig := config.TradingConfig{
						AccountId: account.GetId(),
						Ticker:    ticker,
						Figi:      share.GetFigi(),
						Strategy:  strategy,
					}
					filename := ticker + "_" + account.GetId() + ".yaml"
					err := config.WriteTradingConfig(configsPath, filename, &tradingConfig)
					if err != nil {
						fmt.Println(color.YellowString("–¢–æ—Ä–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è %s –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ %v", filename, err))
					}
					continue TickerLoop
				}
			}
			fmt.Println(color.YellowString("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∏–∫–µ—Ä–æ–º \"" + ticker + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
			ticker = strings.ToUpper(requestParameter("üñç –£—Ç–æ—á–Ω–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ç–∏–∫–µ—Ä", false))
			if ticker == "" {
				continue TickerLoop
			}
		}
	}

	fmt.Println(color.GreenString("üëç –£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!"))
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
func requestParameter(msg string, required bool) string {
	for {
		fmt.Printf(color.BlueString(msg) + ": ")
		if !scanner.Scan() {
			if scanner.Err() == nil {
				log.Fatalf("–í–≤–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
			} else {
				fmt.Println(color.YellowString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏"))
				continue
			}
		}
		parameter := scanner.Text()
		if required && parameter == "" {
			fmt.Println(color.YellowString("–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º"))
			continue
		}
		return parameter
	}
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
func requestChoice(msg string, a []string) int {
	if len(a) <= 0 {
		log.Fatalf("–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω–æ 0 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
	}
	for i, aa := range a {
		fmt.Printf("%d. %s\n", i, aa)
	}
	for {
		input := requestParameter(msg, true)
		n, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println(color.YellowString("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"))
			continue
		}
		if n < 0 || n >= len(a) {
			fmt.Println(color.YellowString("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [%d, %d]", 0, len(a)-1))
			continue
		}
		return n
	}
}

func portfolioReport(portfolio *api.PortfolioResponse) string {
	totalAmount := convertMoneyValue(portfolio.GetTotalAmountCurrencies()) +
		convertMoneyValue(portfolio.GetTotalAmountBonds()) +
		convertMoneyValue(portfolio.GetTotalAmountShares()) +
		convertMoneyValue(portfolio.GetTotalAmountEtf()) +
		convertMoneyValue(portfolio.GetTotalAmountFutures())

	expectedYield := float64(portfolio.ExpectedYield.Units) + float64(portfolio.ExpectedYield.Nano)/1000000000

	report := bold("%.2f‚ÇΩ ", totalAmount)
	income := fmt.Sprintf("%.2f‚ÇΩ (%.2f%%)", totalAmount*expectedYield/100, math.Abs(expectedYield))
	switch {
	case expectedYield < 0:
		report += color.RedString(income)
	case expectedYield > 0:
		report += color.GreenString(income)
	default:
		report += color.WhiteString(income)
	}
	return report
}

func convertMoneyValue(moneyValue *api.MoneyValue) float64 {
	return float64(moneyValue.Units) + float64(moneyValue.Nano)/1000000000
}
