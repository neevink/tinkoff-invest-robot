package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"math"
	"os"
	"strings"

	"github.com/fatih/color"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/internal/strategies"
	api "tinkoff-invest-bot/investapi"
	"tinkoff-invest-bot/pkg/sdk"
	"tinkoff-invest-bot/pkg/utils"
)

var (
	scanner = bufio.NewScanner(os.Stdin)
	bold    = color.New(color.Bold).SprintfFunc()
)

const (
	configsPath     = "./configs/generated/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	fmt.Println(color.GreenString("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–†–æ–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", color.MagentaString("–±–∞–∑–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ üìà"), "–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
	fmt.Println("–ï—â–µ", color.MagentaString("–Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"), "–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å üí´")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken, robotConfig.AppName, ctx)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
	accounts, _, err := s.GetAccounts()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: %v", err)
	}
	invalidAccounts := 0
	var validAccounts []*api.Account
	var accountsInfo []string
	for _, account := range accounts {
		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ—Ç
		if account.GetType() == api.AccountType_ACCOUNT_TYPE_UNSPECIFIED ||
			account.GetStatus() != api.AccountStatus_ACCOUNT_STATUS_OPEN ||
			account.GetAccessLevel() != api.AccessLevel_ACCOUNT_ACCESS_LEVEL_FULL_ACCESS {
			invalidAccounts++
			continue
		}
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
		var accountInfo string
		switch account.GetType() {
		case api.AccountType_ACCOUNT_TYPE_INVEST_BOX:
			accountInfo += "üê∑ "
		case api.AccountType_ACCOUNT_TYPE_TINKOFF_IIS:
			accountInfo += "üè¶ "
		case api.AccountType_ACCOUNT_TYPE_TINKOFF:
			accountInfo += "üí∞ "
		}
		accountInfo += account.GetName() + " "
		portfolio, _, err := s.GetPortfolio(account.GetId())
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %v", account.GetId(), err)
		}
		accountInfo += portfolioReport(portfolio)
		accountsInfo = append(accountsInfo, accountInfo)
		validAccounts = append(validAccounts, account)
	}

	// –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
	if invalidAccounts > 0 {
		fmt.Printf(color.YellowString("–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")+": %d\n", invalidAccounts)
	}
	if invalidAccounts >= len(accounts) {
		log.Fatalln("–ü–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
	}
	n := utils.RequestChoice("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", accountsInfo, scanner)
	account := validAccounts[n]

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	var strategyNames []string
	for name := range strategies.StrategyList {
		strategyNames = append(strategyNames, name)
	}
	n = utils.RequestChoice("üïπ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", strategyNames, scanner)
	strategyName := strategyNames[n]
	// TODO –∑–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
	strategy := config.StrategyConfig{
		Name:     strategyName,
		Interval: "1_MIN",
		Config:   make(map[string]string, 0),
	}

	// –í—ã–±–æ—Ä –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
	responseShares, _, err := s.GetShares()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö: %v", err)
	}
	input := utils.RequestParameter("üõç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)", true, scanner)
	tickers := strings.Split(input, " ")
	for i := 0; i < len(tickers); i++ {
		tickers[i] = strings.ToUpper(tickers[i])
	}

TickerLoop:
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
	for _, ticker := range tickers {
		for {
			for _, share := range responseShares {
				if share.GetTicker() == ticker {
					tradingConfig := config.TradingConfig{
						AccountId: account.GetId(),
						Ticker:    ticker,
						Figi:      share.GetFigi(),
						Strategy:  strategy,
						Exchange:  share.GetExchange(),
					}
					filename := ticker + "_" + account.GetId() + ".yaml"
					err := config.WriteTradingConfig(configsPath, filename, &tradingConfig)
					if err != nil {
						fmt.Println(color.YellowString("–¢–æ—Ä–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è %s –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ %v", filename, err))
					}
					continue TickerLoop
				}
			}
			fmt.Println(color.YellowString("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∏–∫–µ—Ä–æ–º \"" + ticker + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
			ticker = strings.ToUpper(utils.RequestParameter("üñç –£—Ç–æ—á–Ω–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ç–∏–∫–µ—Ä", false, scanner))
			if ticker == "" {
				continue TickerLoop
			}
		}
	}

	fmt.Println(color.GreenString("üëç –£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!"))
}

func portfolioReport(portfolio *api.PortfolioResponse) string {
	totalAmount := sdk.MoneyValueToFloat(portfolio.GetTotalAmountCurrencies()) +
		sdk.MoneyValueToFloat(portfolio.GetTotalAmountBonds()) +
		sdk.MoneyValueToFloat(portfolio.GetTotalAmountShares()) +
		sdk.MoneyValueToFloat(portfolio.GetTotalAmountEtf()) +
		sdk.MoneyValueToFloat(portfolio.GetTotalAmountFutures())

	expectedYield := sdk.QuotationToFloat(portfolio.ExpectedYield)

	report := bold("%.2f‚ÇΩ ", totalAmount)
	income := fmt.Sprintf("%.2f‚ÇΩ (%.2f%%)", totalAmount*expectedYield/100, math.Abs(expectedYield))
	switch {
	case expectedYield < 0:
		report += color.RedString(income)
	case expectedYield > 0:
		report += color.GreenString(income)
	default:
		report += color.WhiteString(income)
	}
	return report
}
