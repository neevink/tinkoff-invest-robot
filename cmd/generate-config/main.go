package main

import (
	"bufio"
	"fmt"
	"log"
	"math"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/fatih/color"

	api "tinkoff-invest-bot/investapi"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/pkg/sdk"
)

var (
	scanner          = bufio.NewScanner(os.Stdin)
	bold             = color.New(color.Bold).SprintfFunc()
	configsPath      = "./configs/generated/"
	commonConfigPath = "./configs/common.yaml"
)

func main() {
	fmt.Println(color.GreenString("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–†–æ–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", color.MagentaString("–±–∞–∑–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ üìà"), "–Ω–∞ MOEX –∏ SPB")
	fmt.Println("–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å üí´")
	commonConfig := config.LoadConfig(commonConfigPath)
	tinkoffApiEndpoint := requestParameter("üì¨ –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞", commonConfig.TinkoffApiEndpoint)
	accessToken := requestParameter("üîë –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", commonConfig.AccessToken)

	s, err := sdk.New(tinkoffApiEndpoint, accessToken)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}
	accounts, err := s.GetAccounts()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: %v", err)
	}
	accountsAndPortfolios := make(map[*api.Account]*api.PortfolioResponse)
	for _, account := range accounts {
		portfolio, err := s.GetPortfolio(account.GetId())
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %v", account.GetId(), err)
		}
		accountsAndPortfolios[account] = portfolio
	}
	accountsInfo, invalidAccounts := accountsReport(accountsAndPortfolios)
	if invalidAccounts > 0 {
		fmt.Printf(color.YellowString("–ù–∞–π–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")+": %d\n", invalidAccounts)
	}
	n := requestChoice("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", accountsInfo)
	account := accounts[n]

	responseShares, err := s.GetShares()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö: %v", err)
	}
	var commonTickers []string
	for _, ticker := range commonConfig.Shares {
		commonTickers = append(commonTickers, ticker.Ticker)
	}
	input := requestParameter("üõç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", strings.Trim(fmt.Sprint(commonTickers), "[]"))
	var tickers []string
	if input == "" {
		tickers = commonTickers
	} else {
		tickers = strings.Split(input, " ")
	}
	for i := 0; i < len(tickers); i++ {
		tickers[i] = strings.ToUpper(tickers[i])
	}
	var shares []config.Share
TickerLoop:
	for _, ticker := range tickers {
		for _, share := range responseShares {
			if share.GetTicker() == ticker {
				shares = append(shares, config.Share{Ticker: ticker, Figi: share.GetFigi()})
				continue TickerLoop
			}
		}
		fmt.Println(color.YellowString("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∏–∫–µ—Ä–æ–º \"" + ticker + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
	}

	newConfig := &config.Config{
		TinkoffApiEndpoint: tinkoffApiEndpoint,
		AccessToken:        accessToken,
		AccountId:          account.GetId(),
		Shares:             shares,
	}

	fileName := requestParameter("üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞", "config_at_"+time.Now().Format("02-01-06_15:04.05"))
	if strings.Contains(fileName, "/") {
		log.Fatalf("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
	}
	newConfigPath := configsPath + fileName + ".yaml"
	if err := config.WriteConfig(newConfigPath, newConfig); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ %v", err)
	}
	fmt.Println(color.GreenString("üëç –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!"))
}

func requestParameter(msg string, common string) string {
	fmt.Printf(color.BlueString(msg)+": (%s) ", common)
	for {
		if !scanner.Scan() {
			if scanner.Err() == nil {
				log.Fatalf("–í–≤–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
			} else {
				fmt.Println(color.YellowString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏"))
				continue
			}
		}
		parameter := scanner.Text()
		if parameter == "" {
			return common
		} else {
			return parameter
		}
	}
}

func accountsReport(accountsAndPortfolios map[*api.Account]*api.PortfolioResponse) ([]string, int) {
	var accountsInfo []string
	var invalidAccounts int
	i := 0
	for account, portfolio := range accountsAndPortfolios {
		if account.GetType() == api.AccountType_ACCOUNT_TYPE_UNSPECIFIED ||
			account.GetStatus() != api.AccountStatus_ACCOUNT_STATUS_OPEN ||
			account.GetAccessLevel() != api.AccessLevel_ACCOUNT_ACCESS_LEVEL_FULL_ACCESS {
			invalidAccounts++
		} else {
			var accountInfo string
			switch account.GetType() {
			case api.AccountType_ACCOUNT_TYPE_INVEST_BOX:
				accountInfo += "üê∑ "
			case api.AccountType_ACCOUNT_TYPE_TINKOFF_IIS:
				accountInfo += "üè¶ "
			case api.AccountType_ACCOUNT_TYPE_TINKOFF:
				accountInfo += "üí∞ "
			}
			accountInfo += account.GetName() + " "
			accountInfo += portfolioReport(portfolio)
			accountsInfo = append(accountsInfo, accountInfo)
		}
		i++
	}
	return accountsInfo, invalidAccounts
}

func portfolioReport(portfolio *api.PortfolioResponse) string {
	totalAmount := convertMoneyValue(portfolio.GetTotalAmountCurrencies()) +
		convertMoneyValue(portfolio.GetTotalAmountBonds()) +
		convertMoneyValue(portfolio.GetTotalAmountShares()) +
		convertMoneyValue(portfolio.GetTotalAmountEtf()) +
		convertMoneyValue(portfolio.GetTotalAmountFutures())

	expectedYield := float64(portfolio.ExpectedYield.Units) + float64(portfolio.ExpectedYield.Nano)/1000000000

	report := bold("%.2f‚ÇΩ ", totalAmount)
	income := fmt.Sprintf("%.2f‚ÇΩ (%.2f%%)", totalAmount*expectedYield/100, math.Abs(expectedYield))
	switch {
	case expectedYield < 0:
		report += color.RedString(income)
	case expectedYield > 0:
		report += color.GreenString(income)
	default:
		report += color.WhiteString(income)
	}
	return report
}

func convertMoneyValue(moneyValue *api.MoneyValue) float64 {
	return float64(moneyValue.Units) + float64(moneyValue.Nano)/1000000000
}

func requestChoice(msg string, a []string) int {
	if len(a) <= 0 {
		log.Fatalf("–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω–æ 0 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
	}
	for {
		for i, aa := range a {
			fmt.Printf("%d. %s\n", i, aa)
		}
		input := requestParameter(msg, "0")
		n, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println(color.YellowString("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"))
			continue
		}
		if n < 0 || n >= len(a) {
			fmt.Println(color.YellowString("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [%d, %d]", 0, len(a)-1))
			continue
		}
		return n
	}
}
