package main

import (
	"bufio"
	"fmt"
	"github.com/fatih/color"
	"log"
	"math"
	"os"
	"strconv"
	api "tinkoff-invest-bot/investapi"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/pkg/sdk"
)

var (
	scanner = bufio.NewScanner(os.Stdin)
	bold    = color.New(color.Bold).SprintfFunc()
)

func main() {
	fmt.Println(color.GreenString("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º üìù", color.MagentaString("–±–ª–∞–±–ª–∞"), "–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", color.MagentaString("–±–ª–∞"))
	fmt.Println("–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å üí´")

	commonConfig := config.LoadConfig("./configs/common.yaml")

	tinkoffApiEndpoint := requestParameter(color.BlueString("üì¨ –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞"), commonConfig.TinkoffApiEndpoint)
	accessToken := requestParameter(color.BlueString("üîë –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"), commonConfig.AccessToken)

	s, err := sdk.New(tinkoffApiEndpoint, accessToken)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	accounts, err := s.GetAccounts()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: %v", err)
	}
	accountsAndPortfolios := make(map[*api.Account]*api.PortfolioResponse)
	for _, account := range accounts {
		portfolio, err := s.GetPortfolio(account.GetId())
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %v", account.GetId(), err)
		}
		accountsAndPortfolios[account] = portfolio
	}
	accountsInfo, invalidAccounts := accountsReport(accountsAndPortfolios)
	if invalidAccounts > 0 {
		fmt.Printf(color.YellowString("üòµ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: %d\n", invalidAccounts))
	}
	n := requestChoice(color.BlueString("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"), accountsInfo)
	account := accounts[n]

	fmt.Printf("Selected account with id=%s\n", account.GetId())

	fmt.Printf("Input figi of share (example: BBG00RZ9HFD6):\n")
	var figi string
	if _, err := fmt.Scanln(&figi); err != nil {
		log.Fatalf("Scan for figi failed: %e", err)
	}

	share, err := s.GetInstrumentByFigi(figi)
	if err != nil {
		log.Fatalf("Can't receive share: %v", err)
	}
	fmt.Printf("Share name: %s, currency: %s, instrument: %s\n", share.GetName(), share.GetCurrency(), share.GetInstrumentType())

	newConfig := &config.Config{
		TinkoffApiEndpoint: tinkoffApiEndpoint,
		AccessToken:        accessToken,
		AccountId:          account.GetId(),
		Figi:               figi,
	}

	fmt.Printf("Input new config name without spaces:\n")
	var fileName string
	if _, err := fmt.Scanln(&fileName); err != nil {
		log.Fatalf("Scan for accountIndex failed, due to %e", err)
	}
	newConfigsPath := "./generated/" + fileName + ".yaml"

	if err := config.WriteConfig(newConfigsPath, newConfig); err != nil {
		log.Fatalf("Saving error %v", err)
	}
	fmt.Printf("New trading config added successfully!")
}

func requestParameter(msg string, common string) string {
	fmt.Printf("%s: (%s) ", msg, common)
	for {
		if !scanner.Scan() {
			if scanner.Err() == nil {
				log.Fatalf("–í–≤–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
			} else {
				fmt.Println(color.YellowString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏"))
				continue
			}
		}
		parameter := scanner.Text()
		if parameter == "" {
			return common
		} else {
			return parameter
		}
	}
}

func accountsReport(accountsAndPortfolios map[*api.Account]*api.PortfolioResponse) ([]string, int) {
	var accountsInfo []string
	var invalidAccounts int
	i := 0
	for account, portfolio := range accountsAndPortfolios {
		if account.GetType() == api.AccountType_ACCOUNT_TYPE_UNSPECIFIED ||
			account.GetStatus() != api.AccountStatus_ACCOUNT_STATUS_OPEN ||
			account.GetAccessLevel() != api.AccessLevel_ACCOUNT_ACCESS_LEVEL_FULL_ACCESS {
			invalidAccounts++
		} else {
			var accountInfo string
			switch account.GetType() {
			case api.AccountType_ACCOUNT_TYPE_INVEST_BOX:
				accountInfo += "üê∑ "
			case api.AccountType_ACCOUNT_TYPE_TINKOFF_IIS:
				accountInfo += "üè¶ "
			case api.AccountType_ACCOUNT_TYPE_TINKOFF:
				accountInfo += "üí∞ "
			}
			accountInfo += account.GetName() + " "
			accountInfo += portfolioReport(portfolio)
			accountsInfo = append(accountsInfo, accountInfo)
		}
		i++
	}
	return accountsInfo, invalidAccounts
}

func portfolioReport(portfolio *api.PortfolioResponse) string {
	totalAmount := convertMoneyValue(portfolio.GetTotalAmountCurrencies()) +
		convertMoneyValue(portfolio.GetTotalAmountBonds()) +
		convertMoneyValue(portfolio.GetTotalAmountShares()) +
		convertMoneyValue(portfolio.GetTotalAmountEtf()) +
		convertMoneyValue(portfolio.GetTotalAmountFutures())

	expectedYield := float64(portfolio.ExpectedYield.Units) + float64(portfolio.ExpectedYield.Nano)/1000000000

	report := bold("%.2f‚ÇΩ ", totalAmount)
	income := fmt.Sprintf("%.2f‚ÇΩ (%.2f%%)", totalAmount*expectedYield/100, math.Abs(expectedYield))
	switch {
	case expectedYield < 0:
		report += color.RedString(income)
	case expectedYield > 0:
		report += color.GreenString(income)
	default:
		report += color.WhiteString(income)
	}
	return report
}

func convertMoneyValue(moneyValue *api.MoneyValue) float64 {
	return float64(moneyValue.Units) + float64(moneyValue.Nano)/1000000000
}

func requestChoice(msg string, a []string) int {
	fmt.Printf("%s:\n", msg)
	if len(a) <= 0 {
		log.Fatalf("–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω–æ 0 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
	}
	for i, aa := range a {
		fmt.Printf("%d. %s\n", i, aa)
	}
	for {
		if !scanner.Scan() {
			if scanner.Err() == nil {
				log.Fatalf("–í–≤–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
			} else {
				fmt.Println(color.YellowString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏"))
				continue
			}
		}
		n, err := strconv.Atoi(scanner.Text())
		if err != nil {
			fmt.Println(color.YellowString("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"))
			continue
		}
		if n < 0 || n >= len(a) {
			fmt.Println(color.YellowString("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [%d, %d]", 0, len(a)-1))
			continue
		}
		return n
	}
}
