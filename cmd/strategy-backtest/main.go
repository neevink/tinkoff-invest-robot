package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/fatih/color"
	"github.com/sdcoffey/big"
	"github.com/sdcoffey/techan"
	"go.uber.org/zap"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/internal/strategy"
	"tinkoff-invest-bot/investapi"
	"tinkoff-invest-bot/pkg/sdk"
	"tinkoff-invest-bot/pkg/utils"
)

const (
	configsPath     = "./configs/generated/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	logger, err := zap.NewProduction()
	if err != nil {
		log.Fatalf("Cant create production logger: %v", err)
	}
	fmt.Println(color.GreenString("ü§ñ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", color.MagentaString("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é üí´"))
	fmt.Println("–ù–∞", color.MagentaString("–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü¶ï"), "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken, robotConfig.AppName, ctx)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥–∞
	tradingConfigs := config.LoadTradingConfigsFromDir(configsPath)
	var tradingConfigsInfo []string
	for _, tradingConfig := range tradingConfigs {
		tradingConfigsInfo = append(tradingConfigsInfo, configReport(tradingConfig))
	}
	if len(tradingConfigs) == 0 {
		log.Fatalf("–°—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ %s –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ", configsPath)
	}
	n := utils.RequestChoice("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", tradingConfigsInfo, scanner)
	tradingConfig := tradingConfigs[n]

	candles, _, err := s.GetCandles(
		tradingConfig.Figi,
		time.Now().Add(-time.Hour*24), // TODO –∑–∞–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
		time.Now(),
		sdk.IntervalToCandleInterval(tradingConfig.Strategy.Interval),
	)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏: %v", err)
	}

	strategyWrapper, err := strategy.FromConfig(tradingConfig, s, logger)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: %v", err)
	}

	// TODO –µ—â–µ –º–Ω–æ–≥–æ —á–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
	for _, candle := range candles { // –±—É–¥–µ–º –ø–æ–ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–µ—á–∏, –∏–º–∏—Ç–∏—Ä—É—è –∫–æ–Ω—Å—É–º–µ—Ä (—Ç–∞–∫–∞—è —à—Ç—É–∫–∞ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å—É–º–µ—Ä–µ)
		op := strategyWrapper.Step(sdk.HistoricCandleToCandle(candle, sdk.IntervalToDuration(tradingConfig.Strategy.Interval)))
		switch op {
		case strategy.Buy:
			strategyWrapper.AddTrade(techan.Order{
				Side:          techan.BUY,
				Security:      "uid",
				Price:         big.Decimal{},
				Amount:        big.Decimal{},
				ExecutionTime: candle.Time.AsTime(),
			})
		case strategy.Sell:
			strategyWrapper.AddTrade(techan.Order{
				Side:          techan.BUY,
				Security:      "uid",
				Price:         big.Decimal{},
				Amount:        big.Decimal{},
				ExecutionTime: candle.Time.AsTime(),
			})
		case strategy.Hold:
			continue
		default:
			panic("–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
		}
	}
	for _, trade := range strategyWrapper.GetTrades() {
		fmt.Println("buy:", trade.EntranceOrder().ExecutionTime, trade.EntranceOrder().Amount,
			"sell:", trade.ExitOrder().ExecutionTime, trade.ExitOrder().Amount)
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func configReport(tradingConfig *config.TradingConfig) string {
	// TODO pretty input %v %#v –∏–ª–∏ –µ—â–µ —á—Ç–æ –ª—É—á—à–µ
	return fmt.Sprintf("%s_%s: %s %v",
		tradingConfig.Ticker,
		tradingConfig.AccountId,
		tradingConfig.Strategy.Name,
		tradingConfig.Strategy.Other)
}

func timeSeriesFromHistoricCandles(candles []*investapi.HistoricCandle, period time.Duration) *techan.TimeSeries {
	series := techan.NewTimeSeries()

	for _, c := range candles {
		series.AddCandle(sdk.HistoricCandleToCandle(c, period))
	}
	return series
}
