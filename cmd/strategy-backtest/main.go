package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/fatih/color"
	"github.com/sdcoffey/big"
	"github.com/sdcoffey/techan"
	"tinkoff-invest-bot/internal/config"
	api "tinkoff-invest-bot/investapi"
	"tinkoff-invest-bot/pkg/sdk"
	"tinkoff-invest-bot/pkg/utils"
)

const (
	configsPath     = "./configs/generated/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	fmt.Println(color.GreenString("ü§ñ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", color.MagentaString("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é üí´"))
	fmt.Println("–ù–∞", color.MagentaString("–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü¶ï"), "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken, robotConfig.AppName, ctx)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥–∞
	tradingConfigs := config.LoadTradingConfigsFromDir(configsPath)
	var tradingConfigsInfo []string
	for _, tradingConfig := range tradingConfigs {
		tradingConfigsInfo = append(tradingConfigsInfo, configReport(tradingConfig))
	}
	if len(tradingConfigs) == 0 {
		log.Fatalf("–°—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ %s –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ", configsPath)
	}
	n := utils.RequestChoice("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", tradingConfigsInfo, scanner)
	tradingConfig := tradingConfigs[n]

	candles, _, err := s.GetCandles(
		tradingConfig.Figi,
		time.Now().Add(-time.Hour*24), // TODO –∑–∞–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
		time.Now(),
		sdk.IntervalToCandleInterval(tradingConfig.Strategy.Interval),
	)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏: %v", err)
	}

	//ok
	//ok
	//ok
	//ok
	//ok
	// —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è (cross over EMA ‚Äî buy, cross below ‚Äî sell)
	const window = 100                                                  // –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–æ–∫–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ EMA)
	duration := sdk.IntervalToDuration(tradingConfig.Strategy.Interval) // –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ Duration
	series := techan.NewTimeSeries()                                    // –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–≤–µ—á–µ–π (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∂–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
	closePrices := techan.NewClosePriceIndicator(series)                // –æ—Ç—Å–µ–∏–≤–∞–µ—Ç High, Low, Open, –Ω–∞ –≤—ã—Ö–æ–¥–µ —Ç–æ–ª—å–∫–æ Close
	movingAverage := techan.NewEMAIndicator(closePrices, window)        // –°–æ–∑–¥–∞–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ —Å –æ–∫–Ω–æ–º –≤ n —Å–≤–µ—á–µ–π

	// —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	record := techan.NewTradingRecord() // –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–æ–∫, –ø—Ä–æ–¥–∞–∂ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∂–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
	entryRule := techan.And(            // –ø—Ä–∞–≤–∏–ª–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
		techan.NewCrossUpIndicatorRule(movingAverage, closePrices), // –∫–æ–≥–¥–∞ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–µ—Å–µ—á–µ—Ç EMA (—Å—Ç–∞–Ω–µ—Ç –≤—ã—à–µ EMA)
		techan.PositionNewRule{})                                   // –∏ —Å–¥–µ–ª–æ–∫ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ ‚Äî –º—ã –ø–æ–∫—É–ø–∞–µ–º
	exitRule := techan.And(
		techan.NewCrossDownIndicatorRule(closePrices, movingAverage), // —Ç—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –±–µ–∑ —Ç—Ä–µ–Ω–¥–∞
		techan.PositionOpenRule{})
	strategy := techan.RuleStrategy{
		UnstablePeriod: window, // –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —Å—é–¥–∞ –Ω—É–∂–Ω–æ –∫–ª–∞—Å—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, —Ç–∞–∫ –∫–∞–∫ EMA –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
		EntryRule:      entryRule,
		ExitRule:       exitRule,
	}

	for i, candle := range candles { // –±—É–¥–µ–º –ø–æ–ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–µ—á–∏, –∏–º–∏—Ç–∏—Ä—É—è –∫–æ–Ω—Å—É–º–µ—Ä (—Ç–∞–∫–∞—è —à—Ç—É–∫–∞ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å—É–º–µ—Ä–µ)
		series.AddCandle(candleFromHistoricCandle(candle, duration)) // –º–æ–ª –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—à–µ–¥—à—É—é —Å–≤–µ—á—É (–Ω–µ–≤–∞–∂–Ω–æ –æ—Ç–∫—É–¥–∞)
		if strategy.ShouldEnter(series.LastIndex(), record) {
			// —Ç—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø–æ–∫—É–ø–∫–µ, –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∞ sdk –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø–æ —ç—Ç–æ–º—É —Å–∏–≥–Ω–∞–ª—É

			record.Operate(techan.Order{
				Side:          techan.BUY,
				Security:      "uid",
				Price:         big.Decimal{},
				Amount:        big.Decimal{},
				ExecutionTime: series.LastCandle().Period.Start,
			})
			fmt.Println(i, candle.Time.AsTime(), ":", sdk.QuotationToFloat(candle.Close), movingAverage.Calculate(series.LastIndex())) // –≤—ã–≤–µ–¥–µ–º –ø–æ –ø—Ä–∏–∫–æ–ª—É —Å–µ–π—á–∞—Å—à–Ω—é—é —Ü–µ–Ω—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
			fmt.Println("–ö–£–ü–ò–õ–ò")
		} else {
			if strategy.ShouldExit(series.LastIndex(), record) {
				// —Ç—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–æ–¥–∞–∂–µ, –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∞ sdk –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø–æ —ç—Ç–æ–º—É —Å–∏–≥–Ω–∞–ª—É

				record.Operate(techan.Order{
					Side:          techan.SELL,
					Security:      "uid",
					Price:         big.Decimal{},
					Amount:        big.Decimal{},
					ExecutionTime: series.LastCandle().Period.Start, //–¥–æ–ø—É—Å—Ç–∏–º
				})
				fmt.Println(i, candle.Time.AsTime(), ":", sdk.QuotationToFloat(candle.Close), movingAverage.Calculate(series.LastIndex())) // –≤—ã–≤–µ–¥–µ–º –ø–æ –ø—Ä–∏–∫–æ–ª—É —Å–µ–π—á–∞—Å—à–Ω—é—é —Ü–µ–Ω—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
				fmt.Println("–ø—Ä–æ–¥–∞–ª–∏")
			} else {
				//fmt.Println("–î–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
			}
		}
	}

	fmt.Println("–≤–æ—Ç —Ç—Ä–µ–π–¥—ã:")
	for i, trade := range record.Trades {
		fmt.Println(i, trade.EntranceOrder().ExecutionTime, trade.ExitOrder().ExecutionTime)
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func configReport(tradingConfig *config.TradingConfig) string {
	// TODO pretty input %v %#v –∏–ª–∏ –µ—â–µ —á—Ç–æ –ª—É—á—à–µ
	return fmt.Sprintf("%s_%s: %s %v",
		tradingConfig.Ticker,
		tradingConfig.AccountId,
		tradingConfig.Strategy.Name,
		tradingConfig.Strategy.Config)
}

func timeSeriesFromHistoricCandles(candles []*api.HistoricCandle, period time.Duration) *techan.TimeSeries {
	series := techan.NewTimeSeries()

	for _, c := range candles {
		series.AddCandle(candleFromHistoricCandle(c, period))
	}
	return series
}

func candleFromHistoricCandle(c *api.HistoricCandle, period time.Duration) *techan.Candle {
	timePeriod := techan.NewTimePeriod(c.Time.AsTime(), period)
	candle := techan.NewCandle(timePeriod)

	candle.OpenPrice = big.NewDecimal(sdk.QuotationToFloat(c.Open))
	candle.ClosePrice = big.NewDecimal(sdk.QuotationToFloat(c.Close))
	candle.MaxPrice = big.NewDecimal(sdk.QuotationToFloat(c.High))
	candle.MinPrice = big.NewDecimal(sdk.QuotationToFloat(c.Low))
	candle.Volume = big.NewFromInt(int(c.Volume))
	return candle
}
