package main

import (
	"bufio"
	"context"
	"fmt"
	"github.com/fatih/color"
	"log"
	"os"
	"time"
	"tinkoff-invest-bot/internal/config"
	api "tinkoff-invest-bot/investapi"
	"tinkoff-invest-bot/pkg/sdk"
	"tinkoff-invest-bot/pkg/utils"
)

const (
	configsPath     = "./configs/generated/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	fmt.Println(color.GreenString("ü§ñ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", color.MagentaString("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é üí´"))
	fmt.Println("–ù–∞", color.MagentaString("–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü¶ï"), "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken, robotConfig.AppName, ctx)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥–∞
	tradingConfigs := config.LoadTradingConfigsFromDir(configsPath)
	var tradingConfigsInfo []string
	for _, tradingConfig := range tradingConfigs {
		tradingConfigsInfo = append(tradingConfigsInfo, configReport(tradingConfig))
	}
	n := utils.RequestChoice("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", tradingConfigsInfo, scanner)
	tradingConfig := tradingConfigs[n]

	// TODO –∑–∞–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	_, _, err = s.GetCandles(tradingConfig.Figi, time.Now(), time.Now(), api.CandleInterval_CANDLE_INTERVAL_5_MIN)
	if err != nil {
		return
	}
}

// –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func configReport(tradingConfig *config.TradingConfig) string {
	// TODO pretty input %v %#v –∏–ª–∏ –µ—â–µ —á—Ç–æ –ª—É—á—à–µ
	return fmt.Sprintf("%s_%s: %s %v",
		tradingConfig.Ticker,
		tradingConfig.AccountId,
		tradingConfig.Strategy.Name,
		tradingConfig.Strategy.Config)
}
