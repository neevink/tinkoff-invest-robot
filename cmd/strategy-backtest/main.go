package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/fatih/color"
	"go.uber.org/zap"

	"tinkoff-invest-bot/internal/config"
	"tinkoff-invest-bot/internal/strategy"
	"tinkoff-invest-bot/investapi"
	"tinkoff-invest-bot/pkg/sdk"
	"tinkoff-invest-bot/pkg/utils"
)

const (
	configsPath     = "./configs/generated/"
	graphsPath      = "./graphs/"
	robotConfigPath = "./configs/robot.yaml"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	err := config.CreateDirIfNotExist("./logs")
	if err != nil {
		log.Fatalf("Cant create dir: %v", err)
	}
	logger, err := zap.NewProduction()
	if err != nil {
		log.Fatalf("Cant create production logger: %v", err)
	}
	fmt.Println(color.GreenString("ü§ñ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!"))
	fmt.Println("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", color.MagentaString("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é üí´"))
	fmt.Println("–ù–∞", color.MagentaString("–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü¶ï"), "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
	robotConfig := config.LoadRobotConfig(robotConfigPath)
	if robotConfig.TinkoffAccessToken == "" {
		log.Fatalf("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (TINKOFF_ACCESS_TOKEN) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	s, err := sdk.New(robotConfig.TinkoffApiEndpoint, robotConfig.TinkoffAccessToken, robotConfig.AppName, ctx)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK: %v", err)
	}

	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥–∞
	tradingConfigs := config.LoadTradingConfigsFromDir(configsPath)
	var tradingConfigsInfo []string
	for _, tradingConfig := range tradingConfigs {
		tradingConfigsInfo = append(tradingConfigsInfo,
			fmt.Sprintf("%s: %s_%s", tradingConfig.StrategyConfig.Name, tradingConfig.Ticker, tradingConfig.AccountId),
		)
	}
	if len(tradingConfigs) == 0 {
		log.Fatalf("–°—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ %s –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ", configsPath)
	}
	n := utils.RequestChoice("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", tradingConfigsInfo, scanner)
	tradingConfig := tradingConfigs[n]

	vars := []string{"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏", "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é", "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "–°–≤–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (–Ω–µ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞)"}
	vals := []time.Duration{1, 7, 30, 0}
	n = utils.RequestChoice("üï∞ –ù–∞ –∫–∞–∫–æ–º –æ—Ç—Ä–µ–∑–∫–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?", vars, scanner)
	var from, to time.Time
	var candles []*investapi.HistoricCandle
	if vals[n] == 0 {
		for {
			from = utils.RequestDate("üé¨ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YY", scanner)
			to = utils.RequestDate("üé¨ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YY", scanner)
			if from.After(to) {
				color.Yellow("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞")
			} else if to.Sub(from) > time.Hour*24*31 {
				color.Yellow("–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞")
			} else {
				break
			}
		}
	} else {
		to = time.Now()
		from = to.Add(-time.Hour * 24 * vals[n])
	}
	for from.Before(to) {
		c, _, err := s.GetCandles(
			tradingConfig.Figi,
			from,
			from.AddDate(0, 0, 1).Add(-time.Minute),
			sdk.IntervalToCandleInterval(tradingConfig.StrategyConfig.Interval),
		)
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏: %v", err)
		}
		candles = append(candles, c...)
		from = from.AddDate(0, 0, 1)
	}

	strategyWrapper, err := strategy.FromConfig(tradingConfig, s, logger)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: %v", err)
	}
	if len(candles) == 0 {
		log.Fatalf("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏")
	}
	for _, candle := range candles {
		newCandle := strategy.HistoricCandleToTechanCandle(candle, sdk.IntervalToDuration(tradingConfig.StrategyConfig.Interval))
		op := strategyWrapper.Step(newCandle, false)
		switch op {
		case strategy.Buy:
			strategyWrapper.AddEvent(strategy.Buy, "uid", sdk.QuotationToFloat(candle.Close), sdk.QuotationToFloat(candle.Close))
		case strategy.Sell:
			strategyWrapper.AddEvent(strategy.Sell, "uid", sdk.QuotationToFloat(candle.Close), sdk.QuotationToFloat(candle.Close))
		case strategy.Hold:
			continue
		default:
			panic("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
		}
	}

	income := 0.0
	for i, trade := range strategyWrapper.TradingRecord.Trades {
		res := trade.ExitOrder().Price.Sub(trade.EntranceOrder().Price).Float()
		fmt.Printf("–ü–æ—Ä—É—á–µ–Ω–∏–µ %v. %s\n", i+1, colorizeFloat(res))
		income += res
	}
	fmt.Println("–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥:", colorizeFloat(income), tradingConfig.Currency)
	path := tradingConfig.Ticker + "_" + tradingConfig.AccountId + ".html"
	strategyWrapper.GenGraph(graphsPath, path)
	p, _ := os.Getwd()
	fmt.Printf("–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç: file://%s", p+"/graphs/"+path+"\n")
}

func colorizeFloat(f float64) string {
	if f < 0 {
		return color.RedString("%f", f)
	} else if f > 0 {
		return color.GreenString("%f", f)
	} else {
		return color.WhiteString("%f", f)
	}
}
